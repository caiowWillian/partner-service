// Code generated by mockery 2.9.0. DO NOT EDIT.

package mocks

import (
	partner "github.com/caiowWillian/partner-service/internal/partner"
	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// CreatePartner provides a mock function with given fields: _a0
func (_m *Service) CreatePartner(_a0 partner.PartnerPostRequest) (string, error) {
	ret := _m.Called(_a0)

	var r0 string
	if rf, ok := ret.Get(0).(func(partner.PartnerPostRequest) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(partner.PartnerPostRequest) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPartnerById provides a mock function with given fields: id
func (_m *Service) GetPartnerById(id string) (partner.Partner, error) {
	ret := _m.Called(id)

	var r0 partner.Partner
	if rf, ok := ret.Get(0).(func(string) partner.Partner); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(partner.Partner)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPartnerByLatLong provides a mock function with given fields: latLong
func (_m *Service) GetPartnerByLatLong(latLong []float64) (partner.Partner, error) {
	ret := _m.Called(latLong)

	var r0 partner.Partner
	if rf, ok := ret.Get(0).(func([]float64) partner.Partner); ok {
		r0 = rf(latLong)
	} else {
		r0 = ret.Get(0).(partner.Partner)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]float64) error); ok {
		r1 = rf(latLong)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
